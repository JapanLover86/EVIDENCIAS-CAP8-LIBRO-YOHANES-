/*
 2  * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 3  * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 4  */
 5 package ListaEnteros.newpackage;
 6 
 7 import java.util.Random;
 8 
 9 /**
10  *
11  * @author Andertaker
12  */
 public class ListaAleatoria
 {
 public static void main(String [] a)
 {
  Random r;
 int d;
  Lista lista;
int k;
  r = new Random();
  lista = new Lista(); // crea lista vacía
  k = Math.abs(r.nextInt()% 55); // número de nodos
  // se insertan elementos en la lista
  for (; k > 0; k-- )
  {
  d = r.nextInt() % 99 ;
  lista.insertarCabezaLista(d);
  }
  // recorre la lista para escribir sus elementos
  System.out.println("Elementos de la lista generados al azar");
  lista.visualizar();
 }
 }

Lista
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package ListaEnteros.newpackage;

/**
 *
 * @author Andertaker
 */
public class Lista {

protected Nodo primero;
public Lista()
{
 primero = null;
}
public Lista insertarCabezaLista(int entrada)
{
 Nodo nuevo ;
 nuevo = new Nodo(entrada);
 nuevo.enlace = primero;
 primero = nuevo;
 return this;
}
public void visualizar()
{
 Nodo n;
 int k = 0;
 n = primero;
 while (n != null)
 {
 System.out.print(n.dato + " ");
 n = n.enlace;
 k++;
 System.out.print( (k%15 != 0 ? " " : "\n"));
 }
}
}

Nodo
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package ListaEnteros.newpackage;

/**
 *
 * @author Andertaker
 */
public class Nodo
{
int dato;
Nodo enlace;
public Nodo(int x)
{
 dato = x;
 enlace = null;
}
public int getDato()
{
 return dato;
}
public Nodo getEnlace()
{
 return enlace;
}
public void setEnlace(Nodo enlace)
{
 this.enlace = enlace;
}
}


2)

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package listaDobleEnlace.newpackage;

/**
 *
 * @author Andertaker
 */
public class IteradorLista
{
private Nodo actual;
public IteradorLista(ListaDoble ld)
{
 actual = ld.cabeza;
}
public Nodo siguiente()
{
 Nodo a;
 a = actual;
 if (actual != null)
 {
 actual = actual.adelante;
 }
 return a;
}
}

Nodo
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package listaDobleEnlace.newpackage;

/**
 *
 * @author Andertaker
 */
public class Nodo
{

    Nodo adelante;
// declaración de nodo de lista doble
public int getDato()
{
        int dato = 0;
 return dato;
}
}


ListaDoble
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package listaDobleEnlace.newpackage;

/**
 *
 * @author Andertaker
 */
public class ListaDoble
{
Nodo cabeza;
// métodos de la clase (implementación en apartado 8.9)
public ListaDoble(){;}
public void insertarCabezaLista(int entrada){;}
public void insertaDespues(Nodo anterior, int entrada){;}
public void eliminar (int entrada){;}
public void visualizar() {;}
public void buscarLista(int destino) {;}
}


ListaEnRango
package listaDobleEnlace.newpackage;

/*
Clase con método main(). Crea el objeto lista doble e inserta
datos enteros generados aleatoriamente.
Crea objeto iterador de lista, para recorrer sus elementos y
aquellos fuera de rango se eliminan. El rango se lee del teclado.
*/
import java.util.Random;
import java.io.*;
import listaDobleEnlace.newpackage.IteradorLista;
import listaDobleEnlace.newpackage.ListaDoble;
import listaDobleEnlace.newpackage.Nodo;
class ListaEnRango
{
public static void main(String [] ar) throws IOException
{
 Random r;
 int d, x1, x2;
 final int M = 29; // número de elementos de la lista
 final int MX = 999;
 BufferedReader entrada = new BufferedReader(
 new InputStreamReader(System.in));
 ListaDoble listaDb;
 r = new Random();
 listaDb = new ListaDoble();
 for (int j = 1; j <= M ; j++)
 {
 d = r.nextInt(MX) + 1;
 listaDb.insertarCabezaLista(d);
 }

 System.out.println("Elementos de la lista original");
 listaDb.visualizar();
 // rango de valores
 System.out.println("\nRango que va a contener la lista");
 x1 = Integer.parseInt(entrada.readLine());
 x2 = Integer.parseInt(entrada.readLine());
 // crea iterador asociado a la lista
 IteradorLista iterador = new IteradorLista(listaDb);
 Nodo a;
 // recorre la lista con el iterador
 a = iterador.siguiente();
 while (a != null)
 {
 int w;
 w = a.getDato();
 if (!(w >= x1 && w <= x2)) // fuera de rango
 listaDb.eliminar(w);
 a = iterador.siguiente();
 }
 System.out.println("Elementos actuales de la lista");
 listaDb.visualizar();
}
}

